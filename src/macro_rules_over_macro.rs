use clippy_utils::diagnostics::span_lint_and_help;
use rustc_ast::ast;
use rustc_lint::{EarlyContext, EarlyLintPass};
use rustc_lint_defs::declare_tool_lint;
use rustc_middle::lint::in_external_macro;
use rustc_session::declare_lint_pass;

declare_tool_lint! {
    /// **What it does:** Checks for uses of `macro_rules` when the
    /// `decl_macro` feature enabled.
    ///
    /// **Why is this bad?** `macro` is more consistent with respect
    /// to privacy and should be preferred.
    ///
    /// **Known problems:** None.
    ///
    /// **Example:**
    /// ```rust
    /// #![feature(decl_macro)]
    /// #![feature(never_type)]
    ///
    /// macro_rules! foo {
    ///     (become unsafe) => {
    ///         *(1 as *const !)
    ///     };
    /// }
    /// ```
    /// Instead, use:
    /// ```rust
    /// #![feature(decl_macro)]
    /// #![feature(never_type)]
    ///
    /// macro foo(become unsafe) {
    ///     *(1 as *const !)
    /// }
    /// ```
    pub patchmixolint::MACRO_RULES_OVER_MACRO,
    Warn,
    "warns against the use of `macro_rules!` when `decl_macro` is enabled"
}

declare_lint_pass!(MacroRulesOverMacro => [MACRO_RULES_OVER_MACRO]);

impl EarlyLintPass for MacroRulesOverMacro {
    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, def: &ast::MacroDef, _: ast::NodeId) {
        // Don't lint against `macro_rules!` definitions generated by external
        // macros
        if in_external_macro(cx.sess, def.body.span().unwrap_or_default()) {
            return;
        }

        if def.macro_rules && cx.sess.features_untracked().decl_macro {
            span_lint_and_help(
                cx,
                MACRO_RULES_OVER_MACRO,
                def.body.span().unwrap_or_default(),
                "`macro_rules!` was used, but the `decl_macro` feature is enabled",
                None,
                "use `macro` instead",
            )
        }
    }
}
